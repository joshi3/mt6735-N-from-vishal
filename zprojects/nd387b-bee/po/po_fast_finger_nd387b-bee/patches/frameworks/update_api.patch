diff --git a/base/api/current.txt b/base/api/current.txt
old mode 100644
new mode 100755
index d1d8cb8..acee487
--- a/base/api/current.txt
+++ b/base/api/current.txt
@@ -14465,8 +14465,23 @@ package android.hardware.fingerprint {
 
   public class FingerprintManager {
     method public void authenticate(android.hardware.fingerprint.FingerprintManager.CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager.AuthenticationCallback, android.os.Handler);
+    method public static int fingerFun(int, int);
     method public boolean hasEnrolledFingerprints();
+    method public static boolean isBtlFingerprintFm();
+    method public static boolean isBtlFingerprintQuick();
     method public boolean isHardwareDetected();
+    field public static final int BTLFINGERFUN_BROADCAST = 5; // 0x5
+    field public static final int BTLFINGERFUN_ENFUN = 0; // 0x0
+    field public static final int BTLFINGERFUN_GETFUN = 3; // 0x3
+    field public static final int BTLFINGERFUN_ISFUN = 1; // 0x1
+    field public static final int BTLFINGERFUN_ISFUNBROAD = 7; // 0x7
+    field public static final int BTLFINGERFUN_MESSAGE = 6; // 0x6
+    field public static final int BTLFINGERFUN_NULL = 8; // 0x8
+    field public static final int BTLFINGERFUN_SETENFUN = 4; // 0x4
+    field public static final int BTLFINGERFUN_SETFUN = 2; // 0x2
+    field public static final int BTLFINGERFUN_SETWAIT = 10; // 0xa
+    field public static final int BTLFINGERFUN_WAIT = 9; // 0x9
+    field public static final java.lang.String BTLFINGER_BOOT_ACTION = "com.blestech.fingerprint.boot";
     field public static final int FINGERPRINT_ACQUIRED_GOOD = 0; // 0x0
     field public static final int FINGERPRINT_ACQUIRED_IMAGER_DIRTY = 3; // 0x3
     field public static final int FINGERPRINT_ACQUIRED_INSUFFICIENT = 2; // 0x2
@@ -14479,6 +14494,8 @@ package android.hardware.fingerprint {
     field public static final int FINGERPRINT_ERROR_NO_SPACE = 4; // 0x4
     field public static final int FINGERPRINT_ERROR_TIMEOUT = 3; // 0x3
     field public static final int FINGERPRINT_ERROR_UNABLE_TO_PROCESS = 2; // 0x2
+    field public static boolean mProximityScreen;
+    field public static boolean mWakefulnessTemp;
   }
 
   public static abstract class FingerprintManager.AuthenticationCallback {
@@ -14502,6 +14519,42 @@ package android.hardware.fingerprint {
     method public java.security.Signature getSignature();
   }
 
+  public abstract interface IFpsFingerClient implements android.os.IInterface {
+    method public abstract void getValue(int, int) throws android.os.RemoteException;
+  }
+
+  public static abstract class IFpsFingerClient.Stub extends android.os.Binder implements android.hardware.fingerprint.IFpsFingerClient {
+    ctor public IFpsFingerClient.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.hardware.fingerprint.IFpsFingerClient asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
+  public abstract interface IFpsFingerManager implements android.os.IInterface {
+    method public abstract int FpBroadcast() throws android.os.RemoteException;
+    method public abstract int FpEnFun(int) throws android.os.RemoteException;
+    method public abstract int FpGetFun() throws android.os.RemoteException;
+    method public abstract int FpIsFun() throws android.os.RemoteException;
+    method public abstract int FpIsFunBroad() throws android.os.RemoteException;
+    method public abstract int FpMessage() throws android.os.RemoteException;
+    method public abstract int FpNull() throws android.os.RemoteException;
+    method public abstract int FpSetEnFun() throws android.os.RemoteException;
+    method public abstract int FpSetFun(int) throws android.os.RemoteException;
+    method public abstract int FpSetWait(int) throws android.os.RemoteException;
+    method public abstract int FpWait() throws android.os.RemoteException;
+    method public abstract int SetKeyCode(int) throws android.os.RemoteException;
+    method public abstract void listen(android.hardware.fingerprint.IFpsFingerClient) throws android.os.RemoteException;
+    method public abstract int mmiFpTest() throws android.os.RemoteException;
+    method public abstract void waitScreenOn() throws android.os.RemoteException;
+  }
+
+  public static abstract class IFpsFingerManager.Stub extends android.os.Binder implements android.hardware.fingerprint.IFpsFingerManager {
+    ctor public IFpsFingerManager.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.hardware.fingerprint.IFpsFingerManager asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
 }
 
 package android.hardware.input {
diff --git a/base/api/system-current.txt b/base/api/system-current.txt
old mode 100644
new mode 100755
index e016268..ed15a23
--- a/base/api/system-current.txt
+++ b/base/api/system-current.txt
@@ -14919,8 +14919,23 @@ package android.hardware.fingerprint {
 
   public class FingerprintManager {
     method public void authenticate(android.hardware.fingerprint.FingerprintManager.CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager.AuthenticationCallback, android.os.Handler);
+    method public static int fingerFun(int, int);
     method public boolean hasEnrolledFingerprints();
+    method public static boolean isBtlFingerprintFm();
+    method public static boolean isBtlFingerprintQuick();
     method public boolean isHardwareDetected();
+    field public static final int BTLFINGERFUN_BROADCAST = 5; // 0x5
+    field public static final int BTLFINGERFUN_ENFUN = 0; // 0x0
+    field public static final int BTLFINGERFUN_GETFUN = 3; // 0x3
+    field public static final int BTLFINGERFUN_ISFUN = 1; // 0x1
+    field public static final int BTLFINGERFUN_ISFUNBROAD = 7; // 0x7
+    field public static final int BTLFINGERFUN_MESSAGE = 6; // 0x6
+    field public static final int BTLFINGERFUN_NULL = 8; // 0x8
+    field public static final int BTLFINGERFUN_SETENFUN = 4; // 0x4
+    field public static final int BTLFINGERFUN_SETFUN = 2; // 0x2
+    field public static final int BTLFINGERFUN_SETWAIT = 10; // 0xa
+    field public static final int BTLFINGERFUN_WAIT = 9; // 0x9
+    field public static final java.lang.String BTLFINGER_BOOT_ACTION = "com.blestech.fingerprint.boot";
     field public static final int FINGERPRINT_ACQUIRED_GOOD = 0; // 0x0
     field public static final int FINGERPRINT_ACQUIRED_IMAGER_DIRTY = 3; // 0x3
     field public static final int FINGERPRINT_ACQUIRED_INSUFFICIENT = 2; // 0x2
@@ -14933,6 +14948,8 @@ package android.hardware.fingerprint {
     field public static final int FINGERPRINT_ERROR_NO_SPACE = 4; // 0x4
     field public static final int FINGERPRINT_ERROR_TIMEOUT = 3; // 0x3
     field public static final int FINGERPRINT_ERROR_UNABLE_TO_PROCESS = 2; // 0x2
+    field public static boolean mProximityScreen;
+    field public static boolean mWakefulnessTemp;
   }
 
   public static abstract class FingerprintManager.AuthenticationCallback {
@@ -14956,6 +14973,42 @@ package android.hardware.fingerprint {
     method public java.security.Signature getSignature();
   }
 
+  public abstract interface IFpsFingerClient implements android.os.IInterface {
+    method public abstract void getValue(int, int) throws android.os.RemoteException;
+  }
+
+  public static abstract class IFpsFingerClient.Stub extends android.os.Binder implements android.hardware.fingerprint.IFpsFingerClient {
+    ctor public IFpsFingerClient.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.hardware.fingerprint.IFpsFingerClient asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
+  public abstract interface IFpsFingerManager implements android.os.IInterface {
+    method public abstract int FpBroadcast() throws android.os.RemoteException;
+    method public abstract int FpEnFun(int) throws android.os.RemoteException;
+    method public abstract int FpGetFun() throws android.os.RemoteException;
+    method public abstract int FpIsFun() throws android.os.RemoteException;
+    method public abstract int FpIsFunBroad() throws android.os.RemoteException;
+    method public abstract int FpMessage() throws android.os.RemoteException;
+    method public abstract int FpNull() throws android.os.RemoteException;
+    method public abstract int FpSetEnFun() throws android.os.RemoteException;
+    method public abstract int FpSetFun(int) throws android.os.RemoteException;
+    method public abstract int FpSetWait(int) throws android.os.RemoteException;
+    method public abstract int FpWait() throws android.os.RemoteException;
+    method public abstract int SetKeyCode(int) throws android.os.RemoteException;
+    method public abstract void listen(android.hardware.fingerprint.IFpsFingerClient) throws android.os.RemoteException;
+    method public abstract int mmiFpTest() throws android.os.RemoteException;
+    method public abstract void waitScreenOn() throws android.os.RemoteException;
+  }
+
+  public static abstract class IFpsFingerManager.Stub extends android.os.Binder implements android.hardware.fingerprint.IFpsFingerManager {
+    ctor public IFpsFingerManager.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.hardware.fingerprint.IFpsFingerManager asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
 }
 
 package android.hardware.hdmi {
diff --git a/base/api/test-current.txt b/base/api/test-current.txt
old mode 100644
new mode 100755
index 3792b09..a13727d
--- a/base/api/test-current.txt
+++ b/base/api/test-current.txt
@@ -14478,8 +14478,23 @@ package android.hardware.fingerprint {
 
   public class FingerprintManager {
     method public void authenticate(android.hardware.fingerprint.FingerprintManager.CryptoObject, android.os.CancellationSignal, int, android.hardware.fingerprint.FingerprintManager.AuthenticationCallback, android.os.Handler);
+    method public static int fingerFun(int, int);
     method public boolean hasEnrolledFingerprints();
+    method public static boolean isBtlFingerprintFm();
+    method public static boolean isBtlFingerprintQuick();
     method public boolean isHardwareDetected();
+    field public static final int BTLFINGERFUN_BROADCAST = 5; // 0x5
+    field public static final int BTLFINGERFUN_ENFUN = 0; // 0x0
+    field public static final int BTLFINGERFUN_GETFUN = 3; // 0x3
+    field public static final int BTLFINGERFUN_ISFUN = 1; // 0x1
+    field public static final int BTLFINGERFUN_ISFUNBROAD = 7; // 0x7
+    field public static final int BTLFINGERFUN_MESSAGE = 6; // 0x6
+    field public static final int BTLFINGERFUN_NULL = 8; // 0x8
+    field public static final int BTLFINGERFUN_SETENFUN = 4; // 0x4
+    field public static final int BTLFINGERFUN_SETFUN = 2; // 0x2
+    field public static final int BTLFINGERFUN_SETWAIT = 10; // 0xa
+    field public static final int BTLFINGERFUN_WAIT = 9; // 0x9
+    field public static final java.lang.String BTLFINGER_BOOT_ACTION = "com.blestech.fingerprint.boot";
     field public static final int FINGERPRINT_ACQUIRED_GOOD = 0; // 0x0
     field public static final int FINGERPRINT_ACQUIRED_IMAGER_DIRTY = 3; // 0x3
     field public static final int FINGERPRINT_ACQUIRED_INSUFFICIENT = 2; // 0x2
@@ -14492,6 +14507,8 @@ package android.hardware.fingerprint {
     field public static final int FINGERPRINT_ERROR_NO_SPACE = 4; // 0x4
     field public static final int FINGERPRINT_ERROR_TIMEOUT = 3; // 0x3
     field public static final int FINGERPRINT_ERROR_UNABLE_TO_PROCESS = 2; // 0x2
+    field public static boolean mProximityScreen;
+    field public static boolean mWakefulnessTemp;
   }
 
   public static abstract class FingerprintManager.AuthenticationCallback {
@@ -14515,6 +14532,42 @@ package android.hardware.fingerprint {
     method public java.security.Signature getSignature();
   }
 
+  public abstract interface IFpsFingerClient implements android.os.IInterface {
+    method public abstract void getValue(int, int) throws android.os.RemoteException;
+  }
+
+  public static abstract class IFpsFingerClient.Stub extends android.os.Binder implements android.hardware.fingerprint.IFpsFingerClient {
+    ctor public IFpsFingerClient.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.hardware.fingerprint.IFpsFingerClient asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
+  public abstract interface IFpsFingerManager implements android.os.IInterface {
+    method public abstract int FpBroadcast() throws android.os.RemoteException;
+    method public abstract int FpEnFun(int) throws android.os.RemoteException;
+    method public abstract int FpGetFun() throws android.os.RemoteException;
+    method public abstract int FpIsFun() throws android.os.RemoteException;
+    method public abstract int FpIsFunBroad() throws android.os.RemoteException;
+    method public abstract int FpMessage() throws android.os.RemoteException;
+    method public abstract int FpNull() throws android.os.RemoteException;
+    method public abstract int FpSetEnFun() throws android.os.RemoteException;
+    method public abstract int FpSetFun(int) throws android.os.RemoteException;
+    method public abstract int FpSetWait(int) throws android.os.RemoteException;
+    method public abstract int FpWait() throws android.os.RemoteException;
+    method public abstract int SetKeyCode(int) throws android.os.RemoteException;
+    method public abstract void listen(android.hardware.fingerprint.IFpsFingerClient) throws android.os.RemoteException;
+    method public abstract int mmiFpTest() throws android.os.RemoteException;
+    method public abstract void waitScreenOn() throws android.os.RemoteException;
+  }
+
+  public static abstract class IFpsFingerManager.Stub extends android.os.Binder implements android.hardware.fingerprint.IFpsFingerManager {
+    ctor public IFpsFingerManager.Stub();
+    method public android.os.IBinder asBinder();
+    method public static android.hardware.fingerprint.IFpsFingerManager asInterface(android.os.IBinder);
+    method public boolean onTransact(int, android.os.Parcel, android.os.Parcel, int) throws android.os.RemoteException;
+  }
+
 }
 
 package android.hardware.input {
